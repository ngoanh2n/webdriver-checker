###
### author: ngoanh2n
###
version: 2.1

parameters:
  os_macos: { type: string, default: macos }
  os_linux: { type: string, default: linux }
  os_windows: { type: string, default: windows }
  browser_chrome: { type: string, default: chrome }
  browser_firefox: { type: string, default: firefox }
  browser_edge: { type: string, default: edge }
  browser_opera: { type: string, default: opera }
  browser_safari: { type: string, default: safari }
  browser_ie: { type: string, default: ie }
  browser_native: { type: string, default: native }
  caps_ios_native: { type: string, default: local-ios-native.yml }
  caps_ios_safari: { type: string, default: local-ios-safari.yml }
  caps_android_native: { type: string, default: local-android-native.yml }
  caps_android_chrome: { type: string, default: local-android-chrome.yml }

executors:
  runner_macos:
    macos:
      xcode: 13.4.1
    shell: /bin/bash
    resource_class: medium
    working_directory: ~/project
    environment:
      OS: <<pipeline.parameters.os_macos>>
  runner_linux:
    machine:
      image: android:202102-01
    shell: /bin/bash
    resource_class: medium
    working_directory: ~/project
    environment:
      OS: <<pipeline.parameters.os_linux>>
  runner_windows:
    machine:
      image: windows-server-2022-gui:current
    shell: bash.exe
    resource_class: windows.medium
    working_directory: ~/project
    environment:
      OS: <<pipeline.parameters.os_windows>>

commands:
  env_prepare:
    parameters:
      browser: { type: string, default: "" }
      is_appium: { type: boolean, default: false }
    steps:
      - checkout
      - run:
          name: Make gradlew executable
          command: chmod +x gradlew
      - run:
          name: Prepare environment
          command: |
            BROWSER=<<parameters.browser>>
            IS_APPIUM=<<parameters.is_appium>>

            ### Appium Mobile
            if $IS_APPIUM; then
              case $OS in
                <<pipeline.parameters.os_macos>>) brew install node ;;
                <<pipeline.parameters.os_linux>>) sudo apt install nodejs ;;
              esac

              npm install appium -g
              npm install appium-doctor -g

              case $OS in
                <<pipeline.parameters.os_macos>>)
                  brew install carthage
                  brew install ios-deploy
                ;;
                <<pipeline.parameters.os_linux>>)
                  adb devices
                ;;
              esac

              ### Download private testing apps
              # if [[ $BROWSER == native ]]; then
              #   APP_LOCATION=webdriverchecker/app

              #   mkdir -p $APP_LOCATION
              #   cd $APP_LOCATION

              #   curl -H 'Authorization: token $GH_ACCESS_TOKEN' \
              #     -H 'Accept: application/vnd.github.v3.raw' \
              #     -O \
              #     -L https://api.github.com/repos/$GH_APP_PATH.apk
              #   md5sum blursut.apk
              # fi

              ### Check appium environment
              appium-doctor
            
            ### PC Browser
            else
              if [[ $OS == <<pipeline.parameters.os_macos>> ]]; then
                brew update
                brew install zip

                case $BROWSER in
                  <<pipeline.parameters.browser_chrome>>) brew install --cask google-chrome ;;
                  <<pipeline.parameters.browser_firefox>>) brew install --cask firefox ;;
                  <<pipeline.parameters.browser_edge>>) brew install --cask microsoft-edge ;;
                  <<pipeline.parameters.browser_opera>>) brew install --cask opera ;;
                esac

              elif [[ $OS == <<pipeline.parameters.os_linux>> ]]; then
                sudo apt update
                sudo apt install zip

                case $BROWSER in
                  <<pipeline.parameters.browser_chrome>>)
                    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - 
                    sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
                    sudo apt update
                    sudo apt install google-chrome-stable
                  ;;
                  <<pipeline.parameters.browser_firefox>>)
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A6DCF7707EBC211F
                    sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-mozilla-security/ppa/ubuntu focal main"
                    sudo apt update
                    sudo apt install firefox
                  ;;
                  <<pipeline.parameters.browser_edge>>)
                    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
                    sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
                    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
                    sudo rm microsoft.gpg
                    sudo apt update
                    sudo apt install microsoft-edge-stable
                  ;;
                esac

              elif [[ $OS == <<pipeline.parameters.os_windows>> ]]; then
                choco feature enable -n allowGlobalConfirmation
                choco install zip

                case $BROWSER in
                  <<pipeline.parameters.browser_chrome>>) choco install googlechrome ;;
                  <<pipeline.parameters.browser_firefox>>) choco install firefox ;;
                  <<pipeline.parameters.browser_edge>>) choco install microsoft-edge ;;
                  <<pipeline.parameters.browser_opera>>) choco install opera ;;
                esac
              fi
            fi
  env_emulator:
    steps:
      - run:
          name: Create AVD
          command: |
            if [[ $OS == <<pipeline.parameters.os_linux>> ]]; then
              SYSTEM_IMAGES="system-images;android-28;google_apis;x86"
              sdkmanager "$SYSTEM_IMAGES"
              echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
            fi
      - run:
          name: Launch AVD
          command: |
            if [[ $OS == <<pipeline.parameters.os_linux>> ]]; then
              emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
            fi
          background: true
      - run:
          name: Wait for AVD
          command: |
            adb wait-for-device
            adb devices
  artifact_save:
    parameters:
      report_name: { type: string, default: "" }
    steps:
      - run:
          name: Compress JUnit report
          command: |
            cd webdriverchecker/build/reports
            zip -r <<parameters.report_name>>.zip tests/test/*
      - store_artifacts:
          name: Store JUnit report
          path: webdriverchecker/build/reports/<<parameters.report_name>>.zip
          destination: <<parameters.report_name>>
  test_execute:
    parameters:
      options: { type: string, default: "" }
      arguments: { type: string, default: "" }
    steps:
      - run:
          name: Execute the test
          command: |
            GRADLE_OPTS="<<parameters.options>>"
            VM_ARGS="<<parameters.arguments>>"
            TEST_COMMAND="./gradlew clean test $GRADLE_OPTS $VM_ARGS"

            echo Test command: $TEST_COMMAND
            $TEST_COMMAND
          when: always

jobs:
  pc_macos_browser:
    parameters:
      browser: { type: string }
    executor: runner_macos
    steps:
      - env_prepare:
          browser: <<parameters.browser>>
      - test_execute:
          options: >-
            --tests com.github.ngoanh2n.wdc.*
          arguments: >-
            -Dwdc.os=macos
            -Dwdc.browser=<<parameters.browser>>
      - artifact_save:
          report_name: macos_<<parameters.browser>>
  pc_linux_browser:
    parameters:
      browser: { type: string }
    executor: runner_linux
    steps:
      - env_prepare:
          browser: <<parameters.browser>>
      - test_execute:
          options: >-
            --tests com.github.ngoanh2n.wdc.*
          arguments: >-
            -Dwdc.os=linux
            -Dwdc.browser=<<parameters.browser>>
      - artifact_save:
          report_name: linux_<<parameters.browser>>
  pc_windows_browser:
    parameters:
      browser: { type: string }
    executor: runner_windows
    steps:
      - env_prepare:
          browser: <<parameters.browser>>
      - test_execute:
          options: >-
            --tests com.github.ngoanh2n.wdc.*
          arguments: >-
            -Dwdc.os=windows
            -Dwdc.browser=<<parameters.browser>>
      - artifact_save:
          report_name: windows_<<parameters.browser>>
  pc_windows_extension:
    executor: runner_windows
    steps:
      - env_prepare:
          browser: chrome
      - test_execute
      - artifact_save:
          report_name: windows_extension
  mobile_macos_ios:
    parameters:
      browser: { type: string }
      caps: { type: string }
    executor: runner_macos
    steps:
      - env_prepare:
          browser: <<parameters.browser>>
          is_appium: true
      - test_execute:
          options: >-
            --tests com.github.ngoanh2n.wdc.*
          arguments: >-
            -Dwdc.os=$OS
            -Dwdc.browser=<<parameters.browser>>
            -Dwdc.caps=<<parameters.caps>>
      - artifact_save:
          report_name: <<pipeline.parameters.os_macos>>_ios_<<parameters.browser>>
  mobile_linux_android:
    parameters:
      browser: { type: string }
      caps: { type: string }
    executor: runner_linux
    steps:
      - env_prepare:
          browser: <<parameters.browser>>
          is_appium: true
      - env_emulator
      - test_execute:
          options: >-
            --tests com.github.ngoanh2n.wdc.*
          arguments: >-
            -Dwdc.os=$OS
            -Dwdc.browser=<<parameters.browser>>
            -Dwdc.caps=<<parameters.caps>>
      - artifact_save:
          report_name: <<pipeline.parameters.os_linux>>_android_<<parameters.browser>>

workflows:
  test_execution:
    jobs:
      - pc_macos_browser:
          name: <<pipeline.parameters.os_macos>>/<<matrix.browser>>
          filters:
            branches:
              only:
                - master
          matrix:
            parameters:
              browser:
                - <<pipeline.parameters.browser_chrome>>
                - <<pipeline.parameters.browser_firefox>>
                - <<pipeline.parameters.browser_edge>>
                - <<pipeline.parameters.browser_opera>>
      - pc_linux_browser:
          name: <<pipeline.parameters.os_linux>>/<<matrix.browser>>
          filters:
            branches:
              only:
                - master
          matrix:
            parameters:
              browser: 
                - <<pipeline.parameters.browser_chrome>>
                - <<pipeline.parameters.browser_firefox>>
                - <<pipeline.parameters.browser_edge>>
      - pc_windows_browser:
          name: <<pipeline.parameters.os_windows>>/<<matrix.browser>>
          filters:
            branches:
              only:
                - master
          matrix:
            parameters:
              browser: 
                - <<pipeline.parameters.browser_chrome>>
                - <<pipeline.parameters.browser_firefox>>
                - <<pipeline.parameters.browser_edge>>
                - <<pipeline.parameters.browser_opera>>
      - pc_windows_extension:
          name: <<pipeline.parameters.os_windows>>/extension
          filters:
            branches:
              only:
                - master
      - mobile_macos_ios:
          name: <<pipeline.parameters.os_macos>>/ios/<<matrix.browser>>
          filters:
            branches:
              only:
                - local
          matrix:
            parameters:
              browser:
                - <<pipeline.parameters.browser_safari>>
                - <<pipeline.parameters.browser_native>>
              caps:
                - <<pipeline.parameters.caps_ios_safari>>
                - <<pipeline.parameters.caps_ios_native>>
            exclude:
              - browser: <<pipeline.parameters.browser_safari>>
                caps: <<pipeline.parameters.caps_ios_native>>
              - browser: <<pipeline.parameters.browser_native>>
                caps: <<pipeline.parameters.caps_ios_safari>>         
      - mobile_linux_android:
          name: <<pipeline.parameters.os_linux>>/android/<<matrix.browser>>
          filters:
            branches:
              only:
                - local
          matrix:
            parameters:
              browser:
                - <<pipeline.parameters.browser_chrome>>
                - <<pipeline.parameters.browser_native>>
              caps:
                - <<pipeline.parameters.caps_android_chrome>>
                - <<pipeline.parameters.caps_android_native>>
            exclude:
              - browser: <<pipeline.parameters.browser_chrome>>
                caps: <<pipeline.parameters.caps_android_native>>
              - browser: <<pipeline.parameters.browser_native>>
                caps: <<pipeline.parameters.caps_android_chrome>>
